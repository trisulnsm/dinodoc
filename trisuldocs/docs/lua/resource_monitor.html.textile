h1. Resource Monitor

<span class='label label-info'>BACKEND SCRIPT</span>

You can attach LUA scripts to any type of resource and get called when they stream in. Each of these resource groups are uniquely identified by a GUID. For a list of "Resource Group GUIDs":/docs/ref/guid.html#resource_groups

h3. Common Resource Groups GUIDs

For quick reference these are the common Resource Group "GUIDs.":basics.html#on_guids  For a full list Login as Admin > profil0 > All Resource Groups

|{D1E27FF0-6D66-4E57-BB91-99F76BB2143E}|DNS Resources|
|{4EF9DEB9-4332-4867-A667-6A30C5900E9E}|URL Resources|
|{5AEE3F0B-9304-44BE-BBD0-0467052CF468}|SSL Certificates|
|{9781DB2C-F78A-4F7F-A7E8-2B1A9A7BE71A}|File Hashes|


h2. Structure 

<div class='lua_skeletons' data-file='resource_monitor' data-name='Resource Monitor'></div>


h2. Table @resource_monitor@

The Lua table @resource_monitor = {..}@  can contain one or more of the following handler functions. 

|_. field |_. type |_. description |
| resource_guid | String | Type of resource. Example @{5AEE3F0B-9304-44BE-BBD0-0467052CF468}@ for SSL Certs.See "Well known guids":/docs/ref/guid.html#resource_groups |
| "onnewresource":#function_onnewresource | function("engine":obj_engine.html, "resource":#resource) |A new resource was seen. Sent within 1 sec of seeing the "resource":#resource |
| "onbeginflush":#function_onbeginflush | function("engine":obj_engine.html) | Before starting to flush all metrics to db|
| "flushfilter":#function_flushfilter | function("engine":obj_engine.html, "resource":#resource) | Return true if you want to save in DB, false to skip this  |
| "onflush":#function_onflush | function("engine":obj_engine.html, "resource":#resource)  | Called for each resource as they are being flushed |
| "onendflush":#function_onendflush | function("engine":obj_engine.html)  | After all resource  have been flushed for this interval  |


h2. Objects Reference

h2. Resource   

|_. method |_. return type |_. description |
|timestamp| number,number | The time when the item was seen. Seconds in @tv_sec@ format, and Microseconds @tv_usec@. <pre> local secs=alert:timestamp()          -- if you only want seconds
local secs,usecs=alert:timestamp()    -- if you want seconds, usecs
local printable = os.date('%c', secs) -- if you want printable 
</pre>  |
|flow | A "flow object":obj_flowid.html | The IP flow that generated the resource  |
|source_ip| string | Source IP Address |
|source_port | string | Source Port |
|destination_ip | string | Destination IP Address |
|destination_port | string | Destination Port |
|uri| string | the resource key. the contents depend on the type of resource|
|label| string | Extra information attached to the URI |
|set_uri| |Change the URI |
|set_label | | Change the label |



h3. Example use of object


-----

h2. Functions Reference


h2. Function @onnewresource@


h3. Purpose   

Whenever a new resource of this type if discovered.

h3. When called

Immediately after the resource is discovered.

h3. Parameters

| engine | An "engine":obj_engine.html object |  use this object to add metrics, resources, or alerts into the Trisul framework |
| resource | A "resource":#resource object | the resource |

h3. Return value

Ignored

h3. Example

-------

h2. Function @onbeginflush@

h3. Purpose   

A streaming snapshot interval is about to start. This will be followed by a series of _flushfilter_ / _onflush_ calls and then _endflush_.

h3. When called


h3. Parameters

| engine | An "engine":obj_engine.html object |  use this object to add metrics, resources, or alerts into the Trisul framework |
| timestamp | Timestamp | Timestamps seconds @tv_sec@ |


h3. Return value

Ignored

h3. Example

------

h2. Function @onflush@

h3. Purpose   

A resource is about to be flushed to the  Trisul-Hub database. 

h3. When called

Before each flow is flushed to the backend Trisul-Hub database. 

h3. Parameters

| engine | An "engine":obj_engine.html object |  use this object to add metrics, resources, or alerts into the Trisul framework |
| resource | A "resource":#resource object | the resource |

h3. Return value

Ignored

h3. Example

-----

h2. Function @flushfilter@

h3. Purpose   

Controls whether a resource is stored in the hub database. 

h3. When called

Called before flushing a resource to the Hub database, you get chance to veto the flush.

h3. Parameters

| engine | An "engine":obj_engine.html object |  use this object to add metrics, resources, or alerts into the Trisul framework |
| resource | A "resource":#resource object | the resource |

h3. Return value

- true := flush this resource to the backend database node
- false := dont flush this resource 

h4. Voting considerations 

If you have multiple scripts _S1, S2, .. SN_ each voting differently on @flushfilter()@, the following rule is enforced. 

# *ALL scripts have to vote NO* to flush  by returning false. 
# Even if one script _Sx_ returns YES or does not implement @flushfilter()@, the artifact is flushed. 

h3. Example


------


h2. Function @onendflush@


h3. Purpose   


h3. When called


h3. Parameters

| engine | An "engine":obj_engine.html object |  use this object to add metrics, resources, or alerts into the Trisul framework |
| timestamp | Timestamp | Timestamps seconds @tv_sec@ |


h3. Return value

Ignored

h3. Example
