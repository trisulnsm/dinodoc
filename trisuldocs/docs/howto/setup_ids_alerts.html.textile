h1. How to send IDS alerts to Trisul 

There are two ways you can send IDS alerts into Trisul

# Use a Unix Socket and send Unified2 or Snort (Unified) format alerts to that socket
# Use the "LUA Input Filter":/docs/lua/inputfilter.html  API 

<div class="callout callout-danger">
<h5>Suricata-EVE APP</h5>
 The newly released Trisul APP "Suricata EVE":https://medium.com/@vivekrj/how-to-get-suricata-eve-alerts-into-trisul-network-analytics-and-why-f3015d7280e0  allows you to easily integrate Suricata alerts. You can give that a try if you prefer Suricata. 
</div>

Trisul can accept alerts in two formats from a named Unix socket
  # *in Unified format* : for use with @snort -A unsock@ option
  # *in Unified2 format* : for use with barnyard2 

<ul class='step-text'>
  <li>
    <h2> Connecting Snort to Trisul using @unsock@ </h2>
    All you have to do is start snort  with the correct options. Trisul automatically picks up the alerts. 
    * Start Trisul Probe <pre> Start Trisul via _Admin -> Start/Stop Tasks -> Start Trisul Probe_</pre>
    <li>Start Snort in @unsock@ mode

      <p>Select the "How to start snort" to get the command line options as shown in the screenshot.  You can then copy-paste that into a terminal.</p><div class="image-box panel panel-info"><div class="panel-body"> <img src="images/start_snort.png" alt="" style="display:block;margin: 0 auto"><p class="image-box-caption text-center"></p> </div></div>
      <pre class="language-lua">
      snort -A unsock -l /usr/local/var/lib/trisul-probe/domain0/probe0/context0/run -c /usr/local/etc/snort.conf -i eth0 -D 
      </pre>
    </li>
  </li>
</ul>



h2. Connecting Barnyard2 to Trisul

Barnyard2 is a software that takes the workload of translating to various output formats away from Snort. You can have it write to multiple outputs.  Trisul can connect to @barnyard2@ using the @alert_unixsock@ output format which is supported by barnyard2.

h3. Change the socket name to barnyard2_alert

Barnyard2 uses the socket name  _barnyard2_alert_ ; edit the 
"IDSAlerts UnixSocket":/docs/ref/trisulconfig.html#idsalerts parameter to send the alerts to @/tmp/barnyard2_alert@ 

<pre class='language-xml'>

<IDSAlerts>
    <Enabled>True</Enabled>
    <UnixSocket>/tmp/barnyard2_alert</UnixSocket>
    <SnortVersion>2.9+</SnortVersion>
    <SnortConfigFile>/etc/snort/snort.conf</SnortConfigFile>
</IDSAlerts>

</pre>

h4. Start Trisul

# Start Trisul via _Admin -> Start/Stop Tasks -> Start Trisul_


h4. Start barnyard2

All we need to do now is to run barnyard2 to read the unified2 files and send alerts into the Unix socket.

Edit barnyard2.conf and add the __alert_unixsock__ output option. 

<pre language='bash'>
#
# output alert_fast: stdout
output alert_unixsock
</pre>

Run barnyard2 like the following

<pre>
barnyard2 -c barnyard2.conf  -l /tmp -o /tmp/byin/unified2.alert.*
</pre>

* ensure the @-l /tmp@ which sends the alerts to the unixsocket @/tmp/barnyard2_alert@ 
* assuming the unified2 files at in _/tmp/byin_


h3. Suricata note 

*UPDATE:* We now recommend using the new EVE alert format for Suricata. Please follow instructions in "How to get Suricata EVE alerts into Trisul Network Analytics?":https://medium.com/@vivekrj/how-to-get-suricata-eve-alerts-into-trisul-network-analytics-and-why-f3015d7280e0

First edit the suricata.yaml file and check if Unified2 logging is enabled. You can disable all other logging.

<pre class='language=yaml'>
 # alert output for use with Barnyard2
- unified2-alert:
    enabled: yes
    filename: unified2.alert

    # Limit in MB.
    limit: 500
</pre>

Next start suricata and have it log to the __/tmp/byin__ directory((byin - just a convention for barnyard input directory, You can use any name you want)).  This will cause suricata to write files of the form __unified2..log__ in the __/tmp/byin__ directory.

<pre class='language-bash'>
suricata -c suricata.yaml -l /tmp/byin -i eth0
</pre>



h2. Diagram showing the pieces

A diagram that shows the relationship between the various pieces.

!images/unsock.png!

 
<div class="faq">

h2. More things to do 



<ul>

<li>

h6. How to change the path of the unix socket

<div>
The default install of every Trisul Probe listens on a unix socket at  @/usr/local/var/lib/trisul-probe/domain0/probe0/context0/run/snort_alert@  You can change this by editing the "IDSAlert/UnixSocket":/docs/ref/trisulconfig.html#idsalerts  parameter in the config file.  
</div>
</li>

<li>

h6. How to read a PCAP file and generate alerts 

<div>

A new tool called  "importpcap_ids":/docs/ug/basicusage/snort.html uses snort to run the normal Analytics as well as IDS over PCAP dumps. The optional _context=_ argument allows you to create multiple separate datasets in Trisul.

<pre class="language-bash">
importpcap_ids pcap_dump_name  context=newdataset1
</pre>
</div>
</li>


</ul>
</div>
